library(dplyr)
library(mirt)
library(irt.cat)
knitr::opts_chunk$set(echo = TRUE)
data(mtcars)
head(mtcars)
mtcars$carNames <- rownames(mtcars)
head(mtcars)
?mtcars
mtcars$am
factor(mtcars$am)
factor(mtcars$am, levels=c("Automatic", "Manual"))
factor(mtcars$am, levels=c("Automatic", "Manual"))
factor(mtcars$am)
factor(mtcars$am, levels=c("Automatic", "Manual"))
as.factor(mtcars$am, levels=c("Automatic", "Manual"))
factor(mtcars$am, levels=c("Automatic", "Manual"))
factor(mtcars$am, level=c("Automatic", "Manual"))
factor(mtcars$am, level=c("Automatic", "Manual"))
factor(mtcars$am, levels=c("Automatic", "Manual"))
factor(mtcars$am, labels=c("Automatic", "Manual"))
mtcars$am <- factor(mtcars$am, labels=c("Automatic", "Manual"))
mtcars$am
head(mtcars)
mtcars$hpCategory <- "HP <= 130"
head(mtcars)
mtcars$hp > 130
mtcars$hpCategory[mtcars$hp > 130] <- "HP > 130"
#Följande är ett alternativ som åstadkommer samma sak:
mtcars[mtcars$hp > 130, "hpCategory"] <- "HP > 130"
mtcars$hpCategory[mtcars$hp > 130] <- "HP > 130"
#Följande är ett alternativ som åstadkommer samma sak:
mtcars[mtcars$hp > 130, "hpCategory"] <- "HP > 130"
head(mtcars)
table(mtcars$am, mtcars$hpCategory)
getwd()
?table
table(mtcars$am, mtcars$hpCategory, dnn=c("am", "hpCategory"))
factorial(0)
factorial(1)
sum(1 / factorial(0:N))
N <- 4
sum(1 / factorial(0:N))
library(irt.cat)
library(irt.cat)
library(irt.cat)
library(irt.cat)
newdata <- model_data[, included_variables, drop=F]
Science_model <- mirt(data = Science, model = 1, itemtype = "graded")
library(mirt)
library(dplyr)
Science_model <- mirt(data = Science, model = 1, itemtype = "graded")
find_next(model = Science_model, model_data=Science[1, , drop=F], included_variables = c(1,3))
#' Find the next best variable
#'
#' Given a model , the full data set used to train the model and a vector with the column positions of the already included variables, find the next best variable.
#'
#' @param model The mirt model.
#' @param model_data A matrix or data frame with only one row. The column names should be the same as for the data training the model.
#' @param included_variables a vector with the positions of the columns of the included variables. If NULL (default), the current ability is estimated to 0.
#' @return The function returns the name of the next best variable, the position of the column with the next best variable, the total information of the test with the next variable included and the information of each variable.
#' @examples
#'
#' Science_model <- mirt(data = Science, model = 1, itemtype = "graded")
#' find_next(model = Science_model, model_data=Science[1, , drop=F], included_variables = c(1,3))
#'
find_next <- function(model, model_data, included_variables=NULL){
item_params <- coef(model, IRTpars=T, simplify=T)$items
if(is.null(included_variables)){
current_ability <- 0
}
else{
newdata <- model_data[, included_variables, drop=F]
current_ability <- est_abilities_mirt(model=model, newdata=newdata, the_method="MAP")
}
all_info <- grm_info(theta = current_ability, item_params = item_params)
all_info_new <- all_info
all_info_new[included_variables] <- 0
best_info_index <- which.max(all_info_new)
new_included <- c(included_variables, best_info_index)
old_itemset_info <- ifelse(is.null(included_variables), 0, sum(all_info[included_variables]))
new_item_info <- max(all_info_new)
new_itemset_info <- sum(all_info[new_included])
best_info_varname <- colnames(model_data)[best_info_index]
res_list <- list(name=best_info_varname, index=best_info_index,
old_itemset_info=old_itemset_info,
new_item_info=new_item_info,
new_itemset_info=new_itemset_info,
all_info=all_info,
estimated_ability=current_ability
)
if(length(included_variables) == nrow(item_params)) return(no_vars_left(res_list))
return(res_list)
}
no_vars_left <- function(res_list){
list(name=NA, index=NA,
old_itemset_info=res_list$old_itemset_info,
new_item_info=NA,
new_itemset_info=res_list$old_itemset_info,
all_info=res_list$all_info)
}
Science_model <- mirt(data = Science, model = 1, itemtype = "graded")
find_next(model = Science_model, model_data=Science[1, , drop=F], included_variables = c(1,3))
model = Science_model
model_data=Science[1, , drop=F]
included_variables = c(1,3)
item_params <- coef(model, IRTpars=T, simplify=T)$items
newdata <- model_data[, included_variables, drop=F]
newdata
current_ability <- est_abilities_mirt(model=model, newdata=newdata, the_method="MAP")
current_ability
#' Estimate the abilities given a model
#'
#' Estimate the abilities given a MIRT model, using all or a subset of the items used to train the model..
#'
#' @param model The mirt model.
#' @param newdata A data frame or matrix with the response pattern to be evaluated. The column names in newdata must be column names that are used in the dataset with which the MIRT model is trained.
#' @param the_metod "ML" or "MAP". "ML" is default.
#' @return A vector of length N, where N is the number of test takers to evaluate.
#' @examples
#' data(Science)
#' Science_model <- mirt(data = Science, model = 1, itemtype = "graded")
#' est_abilities_mirt(model = Science_model, newdata = Science[1:2, c(1, 3)])
est_abilities_mirt <- function(model, newdata, the_method="ML"){
require(dplyr)
all_vars <- colnames(model@Data$data)
included_vars <- colnames(newdata)
data <- matrix(NA, nrow=nrow(newdata), ncol=ncol(model@Data$data)) %>%
data.frame
colnames(data) <- all_vars
data[, included_vars] <- newdata
this_fit <- fscores(model, method=the_method, response.pattern = data)
list(est_theta=this_fit[, 1], SE=this_fit[, 2])
}
item_params <- coef(model, IRTpars=T, simplify=T)$items
if(is.null(included_variables)){
current_ability <- 0
}
newdata <- model_data[, included_variables, drop=F]
current_ability <- est_abilities_mirt(model=model, newdata=newdata, the_method="MAP")
current_ability
current_ability_SE <- est_abilities_mirt(model=model, newdata=newdata, the_method="MAP")
current_ability_SE <- est_abilities_mirt(model=model, newdata=newdata, the_method="MAP")
#' Find the next best variable
#'
#' Given a model , the full data set used to train the model and a vector with the column positions of the already included variables, find the next best variable.
#'
#' @param model The mirt model.
#' @param model_data A matrix or data frame with only one row. The column names should be the same as for the data training the model.
#' @param included_variables a vector with the positions of the columns of the included variables. If NULL (default), the current ability is estimated to 0.
#' @return The function returns the name of the next best variable, the position of the column with the next best variable, the total information of the test with the next variable included and the information of each variable.
#' @examples
#'
#' Science_model <- mirt(data = Science, model = 1, itemtype = "graded")
#' find_next(model = Science_model, model_data=Science[1, , drop=F], included_variables = c(1,3))
#'
find_next <- function(model, model_data, included_variables=NULL){
item_params <- coef(model, IRTpars=T, simplify=T)$items
if(is.null(included_variables)){
current_ability <- 0
current_SE <- NA
}
else{
newdata <- model_data[, included_variables, drop=F]
current_ability_SE <- est_abilities_mirt(model=model, newdata=newdata, the_method="MAP")
current_ability <- current_ability_SE$est_theta
current_SE <- current_ability_SE$SE
}
all_info <- grm_info(theta = current_ability, item_params = item_params)
all_info_new <- all_info
all_info_new[included_variables] <- 0
best_info_index <- which.max(all_info_new)
new_included <- c(included_variables, best_info_index)
old_itemset_info <- ifelse(is.null(included_variables), 0, sum(all_info[included_variables]))
new_item_info <- max(all_info_new)
new_itemset_info <- sum(all_info[new_included])
best_info_varname <- colnames(model_data)[best_info_index]
res_list <- list(name=best_info_varname, index=best_info_index,
old_itemset_info=old_itemset_info,
new_item_info=new_item_info,
new_itemset_info=new_itemset_info,
all_info=all_info,
estimated_ability=current_ability,
estimated_SE=current_SE
)
if(length(included_variables) == nrow(item_params)) return(no_vars_left(res_list))
return(res_list)
}
no_vars_left <- function(res_list){
list(name=NA, index=NA,
old_itemset_info=res_list$old_itemset_info,
new_item_info=NA,
new_itemset_info=res_list$old_itemset_info,
all_info=res_list$all_info)
}
Science_model <- mirt(data = Science, model = 1, itemtype = "graded")
find_next(model = Science_model, model_data=Science[1, , drop=F], included_variables = c(1,3))
1/1.316506
library(irt.cat)
library(irt.cat)
library(irt.cat)
Science_model <- mirt(data = Science, model = 1, itemtype = "graded")
find_next(model = Science_model, model_data=Science[1, , drop=F], included_variables = c(1,3))
Science_model <- mirt(data = mirt::Science, model = 1, itemtype = "graded")
SAT12_model <- mirt(data = mirt::SAT12[, 1:5], model = 1, itemtype = "graded")
model <- list(Science_model, SAT12_model)
model_data <- list(Science[1, , drop=F], SAT12[1, 1:10, drop=F])
included_variables <- list(c(1, 3), NULL)
find_next_mv(model = model, model_data=model_data, included_variables = included_variables)
library(irt.cat)
res_list
reticulate::repl_python()
quit
knitr::opts_chunk$set(echo = TRUE)
reticulate::repl_python()
a = 1+2
import pandas as pd
a = 1+2
exit
theta <- c(-1, 1)
party_pos <- data.frame(party=c("p1", "p2", "p3"), dim1=c(-2.5, 0, 0.1), dim2=c(0, -0.2, -1.7))
make_table_points(theta=theta, party_pos=party_pos) -> points
make_table_points <- function(theta, party_pos){
points <- party_pos
colnames(points) <- c("party", "dim1", "dim2")
points$dim1_dist <- points$dim1-theta[1]
points$dim2_dist <- points$dim2-theta[2]
points$euclid_dist <- sqrt(points$dim1_dist^2 + points$dim2_dist^2)
points$deriv_wrt_theta1 <- points$dim1_dist / points$euclid_dist #The derivative of the distance to a point wrt x
points$deriv_wrt_theta2 <- points$dim2_dist / points$euclid_dist #The derivative of the distance to a point wrt y
rownames(points) <- paste("Party", 1:3)
points
}
make_table_points(theta=theta, party_pos=party_pos) -> points
points
point_pairs_x <- expand.grid(points$deriv_wrt_theta1, points$deriv_wrt_theta1)
point_pairs_y <- expand.grid(points$deriv_wrt_theta2, points$deriv_wrt_theta2)
point_pairs_num <- expand.grid(1:3, 1:3)
point_pairs <- cbind(point_pairs_num, point_pairs_x, point_pairs_y)
point_pairs
colnames(point_pairs) <- c("P1", "P2", "dist1_dim1", "dist2_dim1", "dist1_dim2", "dist2_dim2")
point_pairs
point_pairs <- point_pairs[point_pairs$P1 < point_pairs$P2, ]
point_pairs
point_pairs$net_diff_dim1 <- abs(point_pairs$dist1_dim1 - point_pairs$dist2_dim1)
point_pairs$net_diff_dim2 <- abs(point_pairs$dist1_dim2 - point_pairs$dist2_dim2)
point_pairs$ssq_euclid <- points$euclid_dist[point_pairs$P1]^2 +
points$euclid_dist[point_pairs$P2]^2
point_pairs
point_pairs$weight <- 1/point_pairs$ssq_euclid
point_pairs
point_pairs_return <-
point_pairs[, c("P1", "P2", "net_diff_dim1", "net_diff_dim2", "ssq_euclid", "weight")]
point_pairs_return
points <- make_table_points(theta=theta, party_pos=party_pos)
points
point_pairs <- make_table_point_pairs(theta, points)
make_table_point_pairs <- function(theta, points){
point_pairs_x <- expand.grid(points$deriv_wrt_theta1, points$deriv_wrt_theta1)
point_pairs_y <- expand.grid(points$deriv_wrt_theta2, points$deriv_wrt_theta2)
point_pairs_num <- expand.grid(1:3, 1:3)
point_pairs <- cbind(point_pairs_num, point_pairs_x, point_pairs_y)
colnames(point_pairs) <- c("P1", "P2", "dist1_dim1", "dist2_dim1", "dist1_dim2", "dist2_dim2")
point_pairs <- point_pairs[point_pairs$P1 < point_pairs$P2, ]
point_pairs$net_diff_dim1 <- abs(point_pairs$dist1_dim1 - point_pairs$dist2_dim1)
point_pairs$net_diff_dim2 <- abs(point_pairs$dist1_dim2 - point_pairs$dist2_dim2)
point_pairs$ssq_euclid <- points$euclid_dist[point_pairs$P1]^2 +
points$euclid_dist[point_pairs$P2]^2
point_pairs$weight <- 1/point_pairs$ssq_euclid
point_pairs_return <-
point_pairs[, c("P1", "P2", "net_diff_dim1", "net_diff_dim2", "ssq_euclid", "weight")]
point_pairs_return
}
point_pairs <- make_table_point_pairs(theta, points)
point_pairs
dim_weight_unnormalized <-
colSums(point_pairs[, c("net_diff_dim1", "net_diff_dim2")] * point_pairs$weight)
dim_weight_unnormalized
dim_weight <- dim_weight_unnormalized / sum(dim_weight_unnormalized)
dim_weight
points
point_pairs_x <- expand.grid(points$deriv_wrt_theta1, points$deriv_wrt_theta1)
point_pairs_y <- expand.grid(points$deriv_wrt_theta2, points$deriv_wrt_theta2)
point_pairs <- expand.grid(points$party, points$party)
point_pairs <- cbind(point_pairs, point_pairs_x, point_pairs_y)
colnames(point_pairs) <- c("P1", "P2", "dist1_dim1", "dist2_dim1", "dist1_dim2", "dist2_dim2")
point_pairs
point_pairs <- point_pairs[point_pairs$P1 < point_pairs$P2, ]
View(points)
points$party
typeof(points$party)
class(points$party)
point_pairs <- expand.grid(points$party, points$party)
point_pairs
point_pairs$Var1
point_pairs$Var2
?expand.grid
point_pairs <- expand.grid(points$party, points$party, stringsAsFactors = F)
point_pairs_x <- expand.grid(points$deriv_wrt_theta1, points$deriv_wrt_theta1)
point_pairs_y <- expand.grid(points$deriv_wrt_theta2, points$deriv_wrt_theta2)
point_pairs <- expand.grid(points$party, points$party, stringsAsFactors = F)
point_pairs <- cbind(point_pairs, point_pairs_x, point_pairs_y)
colnames(point_pairs) <- c("P1", "P2", "dist1_dim1", "dist2_dim1", "dist1_dim2", "dist2_dim2")
point_pairs <- point_pairs[point_pairs$P1 < point_pairs$P2, ]
point_pairs
roxygen2::roxygenize()
library(irt.cat)
